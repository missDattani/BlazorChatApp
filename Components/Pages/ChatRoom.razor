@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@* Specifies the render mode for the Blazor component, allowing interactive server-side rendering. *@
@rendermode InteractiveServer 

<h1>Blazor Chat Application</h1>
<hr />

@if (!_isChatting)
{
    <p>
        Enter your name to start chatting:
    </p>

    <input type="text" maxlength="32" @bind="_username" />
    <button type="button" @onclick="Chat"><span aria-hidden="true"></span> Chat!</button>

    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>

    <div id="scrollbox">
        @foreach(var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.UserName</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="Enter your comment" @bind="_newMessage"></textarea>
        <button class="btn btn-default" @onclick="(() => SendAsync(_newMessage))">Send</button>
    </div>
}

@code {
    private bool _isChatting = false;
    private string? _username;
    private string? _message;
    private string? _newMessage;
     
    private List<Message> _messages = new List<Message>();

    public string? _hubUrl;
    private HubConnection? _hubConnection; //Represents a connection to a SignalR hub.

    public async Task Chat() //This method is responsible for starting a new chat session.
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter username";
            return;
        };

        try
        {
            _isChatting = true;
            await Task.Delay(1);

            _messages.Clear();
            string baseUrl = navigationManager.BaseUri; //NavigationManager: A service for managing URIs and navigation.

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder().WithUrl(_hubUrl).Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();
            await SendAsync($"[Notice] {_username} joined chat");

        }catch(Exception ex)
        {
            _message = $"ERROR: Failed to start chat client : {ex.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message) // Handles incoming messages from the SignalR hub.
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);
        _messages.Add(new Message(name, message, isMine));

        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync() // Disconnects the current user from the chat.
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message) //Sends a message to the SignalR hub.
    {
        if(_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);
            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username,string body,bool mine)
        {
            UserName = username;
            Body = body;
            Mine = mine;
        }

        public string? UserName { get; set; }
        public string? Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");
        public string CSS => Mine ? "sent" : "received";
    }
}
